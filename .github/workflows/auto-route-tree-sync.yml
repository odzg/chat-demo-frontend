name: Auto Route Tree Sync

# Trigger this workflow on pull requests that might affect route generation
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'package.json' # When dependencies change
      - 'pnpm-lock.yaml' # When lockfile updates
      - 'src/routes/**' # Route files in src directory
      - 'app/routes/**' # Route files in app directory
      - 'tsconfig.json' # TypeScript config changes
      - 'vite.config.*' # Vite configuration changes

  # Allow manual triggering from GitHub Actions UI
  workflow_dispatch: {}

# Required permissions for the workflow
permissions:
  contents: write # To commit generated files
  pull-requests: write # To comment on pull requests

jobs:
  sync-route-tree:
    runs-on: ubuntu-latest

    steps:
      # Checkout the PR branch to work with the latest changes
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch full history for proper git operations

      # Setup pnpm package manager
      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0

      # Setup Node.js with caching for faster builds
      # Reading node version from package.json ensures consistency with project setup
      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version-file: package.json # Use version from package.json
          cache: 'pnpm' # Cache pnpm dependencies

      # Install all project dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile # Use exact versions from lockfile

      # Generate the route tree using available commands
      - name: Generate route tree
        run: |
          # Try common script names in order of preference
          if jq -e '.scripts["generate-routes"]' package.json > /dev/null; then
            echo "Using generate-routes script"
            pnpm run generate-routes
          elif jq -e '.scripts["tsr:generate"]' package.json > /dev/null; then
            echo "Using tsr:generate script"
            pnpm run tsr:generate
          else
            echo "Using TanStack Router CLI directly"
            pnpm exec tsr generate
          fi

      # Commit any generated changes back to the branch
      - name: Commit changes
        id: commit-changes
        run: |
          # Configure git for GitHub Actions bot
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Stage all changes (route tree files)
          git add .

          # Only commit if there are actual changes
          if ! git diff --staged --quiet; then
            echo "Changes detected, committing..."
            git commit -m "chore(router): regenerate route tree"
            git push
            
            # Set step output to indicate changes were committed
            echo "committed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit - route tree is already up to date"
          fi

      # Notify on the PR that route tree was updated
      - name: Comment on PR
        if: ${{ steps.commit-changes.outputs.committed == 'true' && github.event_name != 'workflow_dispatch' }}
        uses: actions/github-script@v7.0.1
        with:
          script: |
            // Add a helpful comment to the PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ”„ **Route tree regenerated** - Generated files have been committed to this branch.'
            })
